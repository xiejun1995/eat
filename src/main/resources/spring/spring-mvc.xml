<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
	        http://www.springframework.org/schema/beans
	        http://www.springframework.org/schema/beans/spring-beans.xsd
	        http://www.springframework.org/schema/context
	        http://www.springframework.org/schema/context/spring-context.xsd
	        http://www.springframework.org/schema/mvc
	        http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/task
	        http://www.springframework.org/schema/task/spring-task.xsd">
    <!--配置自动扫描包  -->
    <context:component-scan base-package="cn.kgc.eat.pojo,cn.kgc.eat.service,cn.kgc.eat.mapper,cn.kgc.eat.controller,cn.kgc.eat.utils,cn.kgc.eat.pay,cn.kgc.eat.id.worker.others"/>
    <!--  启动webconfig并设置内容协商管理-->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" >
        <!--配置信息转换器  -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <!-- 设置支持的媒体类型 -->
                <property name="supportedMediaTypes">
                    <!--List表示可以配置多个输出格式  -->
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!-- 配置json转换时使用的框架为阿里巴巴的fastjson -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <!--传给web前端的json数据有时需要按照一定的格式输出时间字段，虽然这个可以在js部分完成
                    ，但是js完成时间格式化的缺点在于new Date时会受客户端系统时间影响，因此不推荐使用。
                 在服务端输出json数据时按照一定的格式输出时间字段，fastjson支持两种方式：
                 1.使用JSON.toJSONStringWithDateFormat方法
                 2.JSON.toJSONString方法增加SerializerFeature.WriteDateUseDateFormat参数
                 第一种方法的缺点在于：如果在反序列化时没有调用JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm";
 					之类设置时间格式，反序列化就会失败！
              -->
                <property name="features">
                    <list>
                        <value>WriteDateUseDateFormat</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--配置Spring MVC如何从请求中确定所请求的媒体类型(例如，Accept标头、URL路径扩展、查询参数等
        默认情况下，首先检查URL路径扩展—将json、xml、rss和atom注册为已知的扩展(取决于类路径依赖项)。第二个检查Accept标头。
     考虑将这些缺省值更改为仅接受header，如果必须使用基于url的内容类型解析，则考虑在路径扩展上使用查询参数策略
     -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>
    <!--配置静态资源文件  -->
    <!--cache-period表示缓存有效时间为:24*3600*10 即10年  -->
    <mvc:resources location="/statics/" mapping="/statics/**" cache-period="864000"/>

    <!--定义内容协商视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- ref属性值对应上面配置的 ContentNegotiationManagerFactoryBean中的id属性值-->
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="viewResolvers">
            <list>
                <!--使用properties文件定义解析器  -->
                <!--  <bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
                            <property name="basename" value="views"/>
                        </bean>

                        # And a sample properties file is used (views.properties in WEB-INF/classes):
                        welcome.(class)=org.springframework.web.servlet.view.JstlView
                        welcome.url=/WEB-INF/jsp/welcome.jsp

                        productList.(class)=org.springframework.web.servlet.view.JstlView
                        productList.url=/WEB-INF/jsp/productlist.jsp-->

                <!-- 配置jsp视图解析器 即用户请求上面的地址控制器会调用该页面显示：/WEB-INF/jsp/index.jsp
                  其中index为自定义控制器中返回的逻辑视图名 -->
                <bean
                        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass"
                              value="org.springframework.web.servlet.view.JstlView" />
                    <property name="prefix" value="/statics/" />
                    <property name="suffix" value=".jsp"/>
                </bean>

            </list>
        </property>
    </bean>
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
    </mvc:interceptors>
    <!-- 配置interceptors -->
   <!-- <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/back/**"/>
            <bean class="cn.kgc.eat.interceptor.SysInterceptor"/>
        </mvc:interceptor>

    </mvc:interceptors>-->
    <!-- <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/admin/**"/>
            <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/secure/*"/>
            <bean class="org.example.SecurityInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors> -->
    <!-- 配置多文件上传  MultipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="500000000"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
    <!-- 设置定时任务 -->
    <task:annotation-driven/>
</beans>
